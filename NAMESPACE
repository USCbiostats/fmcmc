# Generated by roxygen2: do not edit by hand

S3method("$",fmcmc_last_mcmc)
S3method("[[",fmcmc_kernel_list)
S3method("[[",fmcmc_last_mcmc)
S3method(MCMC,default)
S3method(MCMC,mcmc)
S3method(MCMC,mcmc.list)
S3method(append_chains,default)
S3method(append_chains,mcmc)
S3method(append_chains,mcmc.list)
S3method(c,fmcmc_kernel)
S3method(print,fmcmc_ith_step)
S3method(print,fmcmc_kernel)
S3method(print,fmcmc_kernel_list)
S3method(print,fmcmc_last_mcmc)
S3method(print,fmcmc_output)
S3method(print,fmcmc_output_conv_check)
export(LAST_CONV_CHECK)
export(LAST_MCMC)
export(MCMC)
export(MCMC_OUTPUT)
export(MCMC_without_conv_checker)
export(append_chains)
export(check_initial)
export(convergence_auto)
export(convergence_data_get)
export(convergence_data_set)
export(convergence_gelman)
export(convergence_geweke)
export(convergence_heildel)
export(convergence_msg_get)
export(convergence_msg_set)
export(cov_recursive)
export(get_)
export(get_burnin)
export(get_chain_id)
export(get_cl)
export(get_conv_checker)
export(get_draws)
export(get_elapsed)
export(get_fun)
export(get_initial)
export(get_kernel)
export(get_logpost)
export(get_multicore)
export(get_nchains)
export(get_nsteps)
export(get_progress)
export(get_seed)
export(get_thin)
export(get_userdata)
export(ith_step)
export(kernel_adapt)
export(kernel_am)
export(kernel_new)
export(kernel_nmirror)
export(kernel_normal)
export(kernel_normal_reflective)
export(kernel_ram)
export(kernel_umirror)
export(kernel_unif)
export(kernel_unif_reflective)
export(last_)
export(last_conv_checker)
export(last_elapsed)
export(last_kernel)
export(last_nchains)
export(last_nsteps)
export(mean_recursive)
export(new_progress_bar)
export(plan_update_sequence)
export(reflect_on_boundaries)
export(set_userdata)
importFrom(MASS,mvrnorm)
importFrom(coda,mcmc)
importFrom(coda,mcmc.list)
importFrom(methods,formalArgs)
importFrom(parallel,clusterApply)
importFrom(parallel,clusterEvalQ)
importFrom(parallel,clusterExport)
importFrom(parallel,clusterSetRNGStream)
importFrom(parallel,detectCores)
importFrom(parallel,makePSOCKcluster)
importFrom(parallel,stopCluster)
importFrom(stats,plogis)
importFrom(stats,runif)
importFrom(utils,head)
